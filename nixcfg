#!/usr/bin/env python3
import argparse
import os
import pathlib
import socket
import subprocess
import sys
import tempfile

NIX_CONFIG_SRC=pathlib.Path(__file__).resolve().parent

def main():
    root_parser = argparse.ArgumentParser(
        prog="nixcfg",
        description="Work with this local system's Nix configuration files",
    )
    subparsers = root_parser.add_subparsers()

    build_parser = subparsers.add_parser(
        "install",
        help="Build and install the current set of Nix configs",
    )
    build_parser.add_argument(
        "-o", "--only",
        choices=["home", "system"],
        help=(
            "Choose to restrict to only build and install a certain set "
            "of configurations. Defaults to building and install all."
        ),
    )
    build_parser.add_argument(
        "--host",
        default=socket.gethostname(),
        choices=["desktop", "laptop"],
        help=(
            "Choose which host to build this set of configurations for. "
            "This mainly matters for hardware configuration."
        )
    )
    build_parser.set_defaults(func=_handle_install_command)

    edit_parser = subparsers.add_parser(
        "edit",
        help="Edit the Nix configuration files",
    )
    edit_parser.set_defaults(func=_handle_edit_command)

    if len(sys.argv) == 1:
        root_parser.print_help()
        exit(1)

    args = root_parser.parse_args()
    args.func(args)



def _handle_install_command(args: argparse.Namespace) -> None:
    if not args.only or args.only == "system":
        _install_system_configs(args.host)

    if not args.only or args.only == "home":
        _install_home_configs()


def _install_system_configs(host: str) -> None:
    _run_cmd(f"sudo nixos-rebuild switch --flake {NIX_CONFIG_SRC}#{host}")


def _install_home_configs() -> None:
    _run_cmd(
        f'nix build "{NIX_CONFIG_SRC}#homeConfigurations.eugene.activationPackage"'
    )
    _run_cmd(f"{NIX_CONFIG_SRC}/result/activate")


def _run_cmd(cmd: str) -> None:
    proc = subprocess.Popen(cmd, shell=True)
    return_code = proc.wait()
    if return_code != 0:
        raise EnvironmentError(f"Ran {cmd}, got return code {proc.returncode}.")


def _handle_edit_command(args: argparse.Namespace) -> None:
    EDITOR = os.environ.get("EDITOR", "vi")
    subprocess.call([EDITOR, NIX_CONFIG_SRC])


if __name__ == "__main__":
    main()
