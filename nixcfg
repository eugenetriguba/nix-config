#!/usr/bin/env sh
#
# Entrypoint for working with this set of Nix configuration files.
set -e

readonly NIX_CONFIG_SRC="/home/eugene/src/nix-config"

function nixcfg() {
	local cmdname="$1";
    if [ -z "$cmdname" ]; then
        nixcfg__help
        exit 0
    fi
    shift  # Grab subcommand

    if _is_valid_command "$cmdname"; then
    	"nixcfg__$cmdname" "$@"
	else
        printf "Unrecognized command: $cmdname\n"
        printf "Try 'nixcfg help' to see the list of available commands."
        exit 1
	fi
}

function _is_valid_command() {
    local subcommand="$1"

    if type "nixcfg__$cmdname" > /dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

function nixcfg__help() {
    printf "usage: nixcfg <command>\n\n"
    printf "Nixcfg is used for working with this system's set of Nix configs.\n\n"
    printf "Commands\n"
    printf "    build           Build the system and home\n"
    printf "    build_system    Build the local nix system configs\n"
    printf "    build_home      Build the local nix home configs and active them\n"
    printf "    help            Show this help menu"
}

function nixcfg__build() {
    local host="$1"
    if [ -z "$host" ]; then
        echo "usage: nixcfg build <hostname>"
        exit 1
    fi

    nixcfg__build_system "$1"
    nixcfg__build_home
}

function nixcfg__build_system() {
    local host="$1"
    if [ -z "$host" ]; then
        echo "usage: nixcfg build_system <hostname>"
        exit 1
    fi

    sudo nixos-rebuild switch --flake "$NIX_CONFIG_SRC#$host"
}

function nixcfg__build_home() {
    nix build "$NIX_CONFIG_SRC#homeConfigurations.eugene.activationPackage"
    "$NIX_CONFIG_SRC/result/activate"
}

nixcfg "$@"
